swagger: '2.0'
info:
  title: General Database CURD REST API
  description: |
    This is the REST API for General Database CURD.
  version: "1.0.0"
# the domain of the service
# TODO to be updated for final deployment
host: localhost:3000
# array of all schemes that your API supports
# TODO to be updated for final deployment
schemes:
  - http
# will be prefixed to all paths
basePath: /api/v1
produces:
  - application/json

# security definitions used in the api
securityDefinitions:
  jwt:
    type: apiKey
    name: Authorization
    in: header
    description: JWT Authentication. Provide API Key in the form 'Bearer &lt;token&gt;'.
# security scheme used by default (individual operations can override this definition)
security:
  - jwt: []

paths:
  /objects/{objectType}:
    post:
      summary: Create an object
      description: |
        This method will create an object.
      tags:
        - General Database CURD
      parameters:
        - name: objectType
          in: path
          description: The type of object.
          required: true
          type: string
        - name: fields
          in: body
          description: The fields of object.
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/Field'
      responses:
        201:
          description: The ID of created object.
          schema:
            type: integer
            format: int64
        400:
          description: The input is not valid
          schema:
            $ref: '#/definitions/Error'
        401:
          description: JWT Token not exists or invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: The user is not authorized to create object.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    get:
      summary: Search Objects
      description: |
        This method returns the objects that matches filter.
      parameters:
        - name: objectType
          in: path
          description: The type of object.
          required: true
          type: string
        - name: pageSize
          in: query
          description: The page size. It should be positive.
          type: integer
          format: int32
          required: false
        - name: pageNumber
          in: query
          description: The page number. It should be non-negative. If it's 0, it means all matched records should be returned.
          type: integer
          format: int32
          required: false
        - name: sortBy
          in: query
          description: The field which records should be sorted by. It should be a valid field name of the specific object.
          type: string
          required: false
        - name: sortOrder
          in: query
          description: The sort order. It should be one of {"Ascending", "Descending"}.
          type: string
          required: false
        - name: matchCriteria
          in: body
          description: The match criteria, this will actually pass values from query.
          required: false
          schema:
            type: array
            items:
              $ref: '#/definitions/MatchCriteria'
      tags:
        - General Database CURD
      responses:
        200:
          description: The search result of objects.
          schema:
            type: object
            properties:
              totalRecords:
                type: integer
                format: int32
                description: The total count of all matched objects.
              totalPages:
                type: integer
                format: int32
                description: The total pages of all matched objects.
              items:
                type: array
                items:
                  $ref: '#/definitions/Object'
        400:
            description: The input is not valid
            schema:
              $ref: '#/definitions/Error'
        401:
          description: JWT Token not exists or invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: The user is not allowed to search objects.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /objects/{objectType}/{id}:
    put:
      summary: Update an object.
      description: |
        This method will update an object.
      tags:
        - General Database CURD
      parameters:
        - name: objectType
          in: path
          description: The type of object.
          required: true
          type: string
        - name: id
          in: path
          description: The id of object.
          required: true
          type: integer
          format: int64
        - name: fields
          in: body
          description: The fields of object to update.
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/Field'
      responses:
        200:
          description: The object is updated successfully.
        400:
          description: The input is not valid
          schema:
            $ref: '#/definitions/Error'
        401:
          description: JWT Token not exists or invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: The user is not authorized to update the object.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: The requested resource doesn't exists
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    get:
      summary: Get an object by object type and ID.
      description: |
        This method will get an object by object type and ID.
      tags:
        - General Database CURD
      parameters:
        - name: objectType
          in: path
          description: The type of object.
          required: true
          type: string
        - name: id
          in: path
          description: The id of object.
          required: true
          type: integer
          format: int64
        - name: fieldNames
          in: query
          required: false
          description: The fields that needs to be retrieved. If it's not provided, all fields will be returned.
          collectionFormat: multi
          type: array
          items:
             type: string
      responses:
        200:
          description: The requested fields will be returned.
          schema:
            type: array
            items:
              $ref: '#/definitions/Field'
        400:
          description: The input is not valid
          schema:
            $ref: '#/definitions/Error'
        401:
          description: JWT Token not exists or invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: The user is not authorized to retrieve the object.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: The requested resource doesn't exists
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Delete an object by object type and ID.
      description: |
        This method will delete an object by object type and ID.
      tags:
        - General Database CURD
      parameters:
        - name: objectType
          in: path
          description: The type of object.
          required: true
          type: string
        - name: id
          in: path
          description: The id of object.
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: The object is deleted successfully.
        400:
          description: The input is not valid
          schema:
            $ref: '#/definitions/Error'
        401:
          description: JWT Token not exists or invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: The user is not allowed to delete the object.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: The requested resource doesn't exists
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
definitions:
  Field:
    properties:
      fieldName:
        type: string
        description: The field name.
      fieldValue:
        type: string
        description: The string representation(JSON format) of field value.
  Object:
    properties:
      objectType:
        type: string
        description: The object type.
      id:
        type: integer
        format: int64
        description: The object ID.
      fields:
        type: array
        description: The fields of the object.
        items:
          $ref: '#/definitions/Field'
  MatchCriteria:
    properties:
      fieldName:
        type: string
        description: The field name.
      value:
        type: string
        description: The string representation(JSON format) of field value that will be compare to the field.
      matchType:
        type: string
        description: The match type. It should be one of {"PartialMatching", "ExactMatching"} if the type of field is string, or one of {"Greater", "GreaterOrEqual", "Equal", "Less", "LessOrEqual"} if the type of field is other comparable type.
  Error:
    properties:
      code:
        type: string
        description: The error code that refers the error type.
      message:
        type: string
        description: The error message.
